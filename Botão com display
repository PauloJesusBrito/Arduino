#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

int inverse = 1;

ISR(INT0_vect){
	inverse *= -1;

	PORTB |= 1;
	if(inverse > 0){
		PORTB &= ~1;
	}
}


void display(int num){

	switch(num){
	case 9:
		PORTC = (1 << 4);
		PORTB &= ~(1 << 5);
		break;
	case 8:
		PORTC = 0x00;
		PORTB &= ~(1 << 5);
		break;
	case 7:
		PORTC = (0xFF << 3);
		PORTB |= (1 << 5);
		break;
	case 6:
		PORTC = (1 << 1);
		PORTB &= ~(1 << 5);
		break;
	case 5:
		PORTC = (1 << 4 | 1 << 1);
		PORTB &= ~(1 << 5);
		break;
	case 4:
		PORTC = (3 << 3 | 1 << 0);
		PORTB &= ~(1 << 5);
		break;
	case 3:
		PORTC = (3 << 4);
		PORTB &= ~(1 << 5);
		break;
	case 2:
		PORTC = ~(3 << 3 | 3 << 0);
		PORTB &= ~(1 << 5);
		break;
	case 1:
		PORTC = ~(1 << 1 | 1 << 2);
		PORTB |= (1 << 5);
		break;
	case 0 :
		PORTC &= 0x00;
		PORTB |= (1 << 5);
		break;
	case 10: //digito
		PORTC |= 0xFF;
		PORTB &= 0b11011111;
		break;
	}
}

void centena(int num){
	PORTD |= (1 << 5);
	display(num);
	_delay_ms(1);
	PORTD &= ~(1 << 5);
}

void dezena(int num){
	PORTD |= (1 << 6);
	display(num);
	_delay_ms(1);
	PORTD &= ~(1 << 6);
}

void unidade(int num){
	PORTD |= (1 << 7);
	display(num);
	_delay_ms(1);
	PORTD &= ~(1 << 7);
}

void setup(){
	DDRB = 0xFF;
	DDRC = 0xFF;
	//DDRD = ~(1 << 3 | 3);
	DDRD = 0x00;

	SREG |= (1 << 7);
	EICRA |= 3;
	EIMSK |= 1;
}



void loop(){

	int cent, dez, un, num;
	bool flag = true;

	PORTD = 0xFF;

	num=0;
	while(flag){
		cent = num/100;
		dez = (num%100)/10;
		un = (num%100)%10;

		for(int j=0; j<1000; j++){

			switch(j%3){
			case 2:
				centena(cent);
				break;
			case 1:
				dezena(dez);
				break;
			case 0:
				unidade(un);
				break;
			}
		}

		num += 1 * inverse;
		flag = (num <= 999); //programa vai rodar enquanto estiver no intervalo [000...999]
		num = num < 0 ? 999 : num; //se for menor voltar para 999
	}

}

int main(void){
	setup();
	while(true){
		loop();
	}
	return 0;
}
